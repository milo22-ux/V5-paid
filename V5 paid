local SoundService = game:GetService("SoundService")

local sound = Instance.new("Sound")
sound.SoundId = "rbxassetid://131644923"
sound.Parent = SoundService
sound.Volume = 1
sound.Looped = false
sound:Play()

local StarterGui = game:GetService("StarterGui")

pcall(function()
    StarterGui:SetCore("SendNotification", {
        Title = "üîë Whitelisted.",
        Text = "Hello Friend. You have been whitelisted.",
        Duration = 7
    })
end)

local ven_hook = {
    combat = {
        hitbox_expander = false,
        hitbox_X = 8,
        hitbox_Y = 8,
        hitbox_Z = 8,
        transparency = 0.5,
        force_head = false,
        silent_aim = false,
        draw_fov = false,
        fov_radius = 100,
        draw_snapline = false,
        fov_color = Color3.fromRGB(255, 255, 255),
        snapline_color = Color3.fromRGB(255, 255, 255),
        armor_viewer = false,
        no_recoil = false,
        no_spread = false,
        no_sway = false,
        jumpshoot = false,
        drill_no_cooldown = false,
    },
    visuals = {
        esp_enabled = false,
        show_corner_box = false,
        show_name = false,
        sleep_check = true,
        show_distance = false,
        max_distance = 1000,
        show_weapon = false,
        ore_esp_enabled = false,
        ore_max_distance = 1000,
        colors = {
            corner_box_color = Color3.fromRGB(255, 255, 255),
            weapon_color = Color3.fromRGB(255, 255, 255),
            dist_color = Color3.fromRGB(255, 255, 255),
            name_color = Color3.fromRGB(255, 255, 255),
            ore_name_color = Color3.fromRGB(255, 255, 255)
        },
        custom_ambience = false,
        ambience_color = Color3.fromRGB(255, 255, 255),
        no_fog = false,
        no_shadow = false,
        no_colorshift = false,
        custom_gun = false,
        gun_color = Color3.fromRGB(0, 170, 255),
        custom_arms = false,
        arms_color = Color3.fromRGB(0, 255, 255),
    },
    misc = {
        change_field_of_view = false,
        fov_val = 70,
        chat_spam = false,
        silent_walk = false
    }
}


local character_cache       = {}
local Cache                 = {}
local processed             = {}


local Run_service           = cloneref(game:GetService("RunService"))
local Replicated_storage    = cloneref(game:GetService("ReplicatedStorage"))
local Players               = cloneref(game:GetService("Players"))
local Camera                = game:GetService("Workspace").CurrentCamera
local Lighting              = game:GetService("Lighting")
local LocalPlayer           = Players.LocalPlayer

local Classes               = getrenv()._G.classes
local Camera_client         = Classes.Camera
local Character             = Classes.Character
local Fps_client            = Classes.FPS
local old_get_cframe        = Camera_client.GetCFrame
local tcp                   = Players.LocalPlayer:FindFirstChild("TCP")
local PlrModel              = Replicated_storage.Shared.entities.Player.Model
local Ignore_folder         = Workspace:WaitForChild("Const"):WaitForChild("Ignore")
local fps_arms              = Ignore_folder:WaitForChild("FPSArms")
local gun_model             = fps_arms:FindFirstChild("HandModel")

local ambientFunc           = { TimeOfDay = Lighting.TimeOfDay, Ambient = Lighting.Ambient, GlobalShadows = Lighting.GlobalShadows, ColorShift_Top = Lighting.ColorShift_Top, ColorShift_Bottom = Lighting.ColorShift_Bottom, FogEnd = Lighting.FogEnd, FogStart = Lighting.FogStart, FogColor = Lighting.FogColor }
local fovFunc               = { FieldOfView = Camera.FieldOfView }
local modules               = {["PlayerClient"] = {}, ["Character"] = {}}
local materials             = { "ForceField", "Neon" }


for _, v in pairs(getgc(true)) do
    if typeof(v) == "function" and islclosure(v) then
        local info = debug.getinfo(v)
        local name = string.match(info.short_src, "%.([%w_]+)$")
        if name and modules[name] and info.name then
            modules[name][info.name] = info.func
        end 
    end
end

local msg = {
    "get vercore L",
    "beamed by vercore",
    "–≤—ã–±–∏—Ç—ã–µ –∑—É–±—ã –≤–µ—Ä–∫–æ—Ä–æ–º –õ–ï –õ–ï –õ–ï –õ–ï",
    "–Ω–∞ –∫–æ–ª–µ–Ω–∏",
    "–≤—ã–µ–±–∞–ª –ø–æ–¥ —Ç–µ–º–Ω–æ–≥–æ –ø—Ä–∏–Ω—Ñ–∞ LE LE LE LE LE LE LE LE",
    "–ü–æ—á–µ–º—É —É –≤–∞—Å –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ—Ç Vercore?",
    "Âè∞ÁÅ£ÊòØ‰∏≠ÂúãÁöÑ",
    "ÊàëÁöÑÂøÉÊªøÊòØÊ∑öÊ∞¥ÔºåÂçªÁÑ°Ê≥ïÊµÅÂá∫„ÄÇ",
    "ÁÇ∫‰ªÄÈ∫ºË¶ÅÈÄôÊ®£ÂÅö",
    "get good, get vercore",
    ".gg/nUPQCZhv8g"
}

local PlayerList = debug.getupvalue(modules.PlayerClient.updatePlayers, 1)
local hbe_bps
hbe_bps = hookmetamethod(game, "__index", newcclosure(function(self, index)
    if not checkcaller() and (index == "CanCollide" or index == "Transparency" or index == "Size") and (self.Name == "Torso" or self.Name == "Head") then
        return PlrModel[self.Name][index]
    end
    return hbe_bps(self, index)
end))
function character_cache:upd_hbe()
    for _, v in pairs(PlayerList) do
        if v.type == "Player" and v.model and v.model.Parent and v.model:FindFirstChild("HumanoidRootPart") then
            local torso = v.model:FindFirstChild("Torso")
            if torso then
                torso.Size = ven_hook.combat.hitbox_expander and Vector3.new(ven_hook.combat.hitbox_size_x, ven_hook.combat.hitbox_size_y, ven_hook.combat.hitbox_size_z) or Vector3.new(0.6530659198760986, 2.220424175262451, 1.4367451667785645)
                torso.CanCollide = false
                torso.Transparency = ven_hook.combat.transparency and ven_hook.combat.transparency or 0
                processed[v] = true
            end
        elseif processed[v] then
            local torso = v.model and v.model:FindFirstChild("Torso")
            if torso then
                torso.Size = Vector3.new(0.6530659198760986, 2.220424175262451, 1.4367451667785645)
                torso.CanCollide = false
                torso.Transparency = 0
            end
            processed[v] = nil
        end
    end
end
local function init_hbe_upd()
    local function upd_all_hbe()
        character_cache:upd_hbe()
    end
    Run_service.Heartbeat:Connect(upd_all_hbe)
    Workspace.ChildAdded:Connect(function(child)
        if child:IsA("Model") and child:FindFirstChild("Head") and child:FindFirstChild("Torso") then
            task.delay(0.5, function()
                for _, v in pairs(PlayerList) do
                    if v.model == child then
                        processed[v] = nil
                        character_cache:upd_hbe()
                    end
                end
            end)
        end
    end)
    Players.PlayerRemoving:Connect(function(player)
        for _, v in pairs(PlayerList) do
            if v == player then
                processed[v] = nil
                character_cache:upd_hbe()
            end
        end
    end)
    Players.PlayerAdded:Connect(function(player)
        player.CharacterAdded:Connect(function(character)
            task.delay(0.5, function()
                for _, v in pairs(PlayerList) do
                    if v.model == character then
                        processed[v] = nil
                        character_cache:upd_hbe()
                    end
                end
            end)
        end)
    end)
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character then
            for _, v in pairs(PlayerList) do
                if v.model == player.Character then
                    processed[v] = nil
                    character_cache:upd_hbe()
                end
            end
        end
    end
end
init_hbe_upd()

local meta = getrawmetatable(game)
setreadonly(meta, false)
local force_head = meta.__namecall
meta.__namecall = function(...)
    local method = getnamecallmethod()
    local args = {...}
    if args[2] == 10 and args[3] == "Hit" and args[7] == "Torso" or args[7] == "RightLowerArm" or args[7] == "RightUpperArm" or 
        args[7] == "LeftUpperArm" or args[7] == "LeftLowerArm" or args[7] == "RightLowerLeg" or 
        args[7] == "LeftUpperLeg" or args[7] == "LeftLowerLeg" or args[7] == "RightUpperLeg" or 
        args[7] == "RightFoot" or args[7] == "LeftFoot" and ven_hook.combat.force_head then
        args[7] = "Head"
    end
    return force_head(table.unpack(args))
end
setreadonly(meta, true)

silent:AddButton("Magic Bullet Redirection", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/milo22-ux/V5-paid/refs/heads/main/Magic%20bullet%20redirection", true))()
end)

local fovCircle = nil
local snapLine = nil

local guns = {
    "AR15", "C9", "Crossbow", "Bow", "EnergyRifle", "GaussRifle",
    "HMAR", "KABAR", "LeverActionRifle", "M4A1", "PipePistol",
    "PipeSMG", "PumpShotgun", "SCAR", "SVD", "USP9", "UZI", "Blunderbuss"
}

function IsValidGun(gun)
    return table.find(guns, tostring(gun)) ~= nil
end

function GetClosestTarget(maxDistance)
    local closestTarget, targetVelocity, closestDistance = nil, nil, math.huge
    for i, v in next, Classes.Player.EntityMap do
        if (v.type == "Player") and not v.sleeping and v.model:FindFirstChild("HumanoidRootPart") then
            local distanceToPlayer = (v.model.HumanoidRootPart.Position - Camera.CFrame.Position).Magnitude
            local screenPoint = Camera:WorldToViewportPoint(v.model.Head.Position)
            local centerScreen = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)
            local distanceFromCenter = (Vector2.new(screenPoint.X, screenPoint.Y) - centerScreen).Magnitude
            if distanceToPlayer <= maxDistance and distanceFromCenter <= ven_hook.combat.fov_radius and distanceToPlayer < closestDistance then
                closestTarget = v.model
                targetVelocity = v.velocityVector
                closestDistance = distanceToPlayer
            end
        end
    end
    return closestTarget, targetVelocity
end

function CalculateBulletDrop(tPos, tVel, cPos, pSpeed, pDrop)
    local dTT = (tPos - cPos).Magnitude
    local tTT = dTT / pSpeed
    local horizontalVel = Vector3.new(tVel.X, 0, tVel.Z) * 7
    local verticalVel = Vector3.new(0, tVel.Y, 0) * 2
    local adjustedVel = horizontalVel + verticalVel
    local pTP = tPos + (adjustedVel * tTT)
    local dP = -pDrop ^ (tTT * pDrop) + 1
    local pPWD = pTP - Vector3.new(0, dP, 0)
    return pPWD
end

Camera_client.GetCFrame = function()
    local closest, velocityVector = GetClosestTarget(1000)
    local equippedData = Fps_client.GetEquippedItem()
    if ven_hook.combat.silent_aim and equippedData and closest and closest:FindFirstChild("HumanoidRootPart") and IsValidGun(equippedData.type) then
        local itemClass = Classes[equippedData.type]
        if itemClass then
            local projectileSpeed = itemClass.ProjectileSpeed
            local projectileDrop = itemClass.ProjectileDrop
            local predictedPosition = CalculateBulletDrop(closest.Head.Position, velocityVector, Camera.CFrame.Position, projectileSpeed, projectileDrop)
            closest.Head.Size = Vector3.new(4, 4, 4)
            closest.Head.Transparency = 1
            spawn(function()
                if closest and closest:FindFirstChild("Head") then
                    closest.Head.Size = Vector3.new(1.672248125076294, 0.835624098777771, 0.835624098777771)
                    closest.Head.Transparency = 0
                end
            end)
            return CFrame.new(Camera.CFrame.Position, predictedPosition)
        end
    end
    return old_get_cframe()
end

Run_service.RenderStepped:Connect(function()
    local center = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)
    
    if ven_hook.combat.draw_fov then
        if not fovCircle then
            fovCircle = ven_hook:Create("Circle", {
                Thickness = 1,
                Filled = false
            })
        end
        fovCircle.Radius = ven_hook.combat.fov_radius
        fovCircle.Position = center
        fovCircle.Color = ven_hook.combat.fov_color
        fovCircle.Visible = true
    elseif fovCircle then
        fovCircle.Visible = false
    end
    
    local closest, _ = GetClosestTarget(1000)
    
    if ven_hook.combat.draw_snapline and closest and closest:FindFirstChild("Head") then
        if not snapLine then
            snapLine = ven_hook:Create("Line", {Thickness = 1})
        end
        local headPos = Camera:WorldToViewportPoint(closest.Head.Position)
        snapLine.From = center
        snapLine.To = Vector2.new(headPos.X, headPos.Y)
        snapLine.Color = ven_hook.combat.snapline_color
        snapLine.Visible = true
    elseif snapLine then
        snapLine.Visible = false
    end
end)

local spoofed_ambient2
spoofed_ambient2 = hookmetamethod(game, "__index", newcclosure(function(self, key)
    if checkcaller() then
        return spoofed_ambient2(self, key)
    end
    if self == Lighting and ambientFunc[key] ~= nil then
        return ambientFunc[key]
    end
    if self == Camera and fovFunc[key] then
        return fovFunc[key]
    end
    return spoofed_ambient2(self, key)
end))
local spoofed_ambient1
spoofed_ambient1 = hookmetamethod(game, "__newindex", newcclosure(function(self, key, value)
    if checkcaller() then
        return spoofed_ambient1(self, key, value)
    end
    if self == Lighting and ambientFunc[key] ~= nil then
        ambientFunc[key] = value
        if key == "Ambient" then
            return spoofed_ambient1(self, key, ven_hook.visuals.custom_ambience and ven_hook.visuals.ambience_color or value)
        elseif key == "GlobalShadows" then
            return spoofed_ambient1(self, key, ven_hook.visuals.no_shadows and false or value)
        elseif key == "ColorShift_Top" or key == "ColorShift_Bottom" then
            return spoofed_ambient1(self, key, ven_hook.visuals.no_colorshift and Color3.new(0, 0, 0) or value)
        elseif key == "FogStart" or key == "FogEnd" then
            return spoofed_ambient1(self, key, ven_hook.visuals.no_fog and 1e6 or value)
        end
    end
    if self == Camera and key == "FieldOfView" then
        fovFunc[key] = value
        if ven_hook.misc.change_field_of_view then
            return spoofed_ambient1(self, key, ven_hook.misc.fov_val)
        end
    end
    return spoofed_ambient1(self, key, value)
end))
task.spawn(function()
    while true do
        if ven_hook.misc.chat_spam then
            local shitchat = game.TextChatService.TextChannels.RBXGeneral
            local random = math.random(1, #msg)
            shitchat:SendAsync(msg[random])
        end
        task.wait(12)
    end
end)
local jump_shoot
jump_shoot = hookfunction(Character.IsGrounded, newcclosure(function(...)
    if ven_hook.combat.jumpshoot then
        return true
    end
    return jump_shoot(...)
end))
local no_sway
no_sway = hookfunction(Camera_client.SetSwaySpeed, newcclosure(function(...)
    if ven_hook.combat.no_sway then
        return true
    end
    return no_sway(...)
end))
local no_spread
no_spread = hookmetamethod(Random.new(), "__namecall", newcclosure(function(self, ...)
    local method = getnamecallmethod()
    if ven_hook.combat.no_spread and method == "NextInteger" and debug.info(3, "l") == 283 and debug.info(3, "s"):find("RangedWeaponClient") or sm11spread and method == "NextInteger" and debug.info(3, "l") == 152 and debug.info(3, "s"):find("BowClient") then
        if getstack(3, 12) == -100 and getstack(3, 13) == 100 then
            setstack(3, 12, math.random(0, 0))
            setstack(3, 13, math.random(0, 0))
        end
    end
    return no_spread(self, ...)
end))
local no_recoil
no_recoil = hookfunction(CFrame.new, newcclosure(function(...)
    if ven_hook.combat.no_recoil and debug.info(3, "s"):find("Camera") and debug.info(3, "l") == 389 then
        setstack(3, 1, {cameraXShake = 0, rotSpeed = 0, rotMag = 0, returnTime = 0, push = 0, returnLerp = 0, cameraY = 0, cameraX = 0, lerp = 0})
    end
    return no_recoil(...)
end))

wait(0.1)
repeat wait(0.1) until game:IsLoaded()
wait(0)
local playerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")
if playerGui:FindFirstChild("ESP_UI") then playerGui.ESP_UI:Destroy() end
local function CreateClass(Class, Properties)
    local ClassInt = typeof(Class) == "string" and Instance.new(Class) or Class
    for Property, Value in next, Properties do
        ClassInt[Property] = Value
    end
    return ClassInt
end
local XDEDE_UI = CreateClass("ScreenGui", {Parent = playerGui, Name = "ESP_UI"})
local function DupeCheck(name)
    local existingESP = XDEDE_UI:FindFirstChild(name)
    if existingESP then existingESP:Destroy() end
end
local function IsSleeping(model)
    if ven_hook.visuals.sleep_check and model and model:FindFirstChild("AnimationController") and model.AnimationController:FindFirstChild("Animator") then
        for _, v in pairs(model.AnimationController.Animator:GetPlayingAnimationTracks()) do
            if v.Animation.AnimationId == "rbxassetid://13280887764" then return true end
        end
    end
    return false
end
local function ESP(playertable)
    if not playertable or not ven_hook.visuals.esp_enabled then return end
    local model = playertable.model
    local root = model:FindFirstChild("HumanoidRootPart")
    if not root then return end
    DupeCheck(model.Name)
    local function CreateCornerBox(name, position, size, anchor)
        return CreateClass("Frame", {
            Parent = XDEDE_UI,
            Name = name,
            BackgroundColor3 = ven_hook.visuals.colors.corner_box_color,
            Position = position,
            Size = size,
            AnchorPoint = anchor,
            Visible = ven_hook.visuals.show_corner_box,
            ZIndex = 10
        })
    end
    local function CreateTextLabel(name, yOffset, visible, color)
        return CreateClass("TextLabel", {
            Parent = XDEDE_UI,
            Name = name,
            BackgroundTransparency = 1,
            Font = Enum.Font.Code,
            TextColor3 = color,
            TextStrokeTransparency = 0,
            TextSize = 11,
            TextStrokeColor3 = Color3.fromRGB(0,0,0),
            Size = UDim2.new(0, 100, 0, 20),
            AnchorPoint = Vector2.new(0.5, 0),
            Position = UDim2.new(0.5, 0, 0, yOffset),
            Visible = visible
        })
    end
    local NameTag = CreateTextLabel("NameTag", 0, ven_hook.visuals.show_name, ven_hook.visuals.colors.name_color)
    local WeaponText = CreateTextLabel("WeaponText", 20, ven_hook.visuals.show_weapon, ven_hook.visuals.colors.weapon_color)
    local boxes = {
        CreateCornerBox("LeftTop", UDim2.new(), UDim2.new(), Vector2.new()),
        CreateCornerBox("LeftSide", UDim2.new(), UDim2.new(), Vector2.new()),
        CreateCornerBox("RightTop", UDim2.new(), UDim2.new(), Vector2.new()),
        CreateCornerBox("RightSide", UDim2.new(), UDim2.new(), Vector2.new()),
        CreateCornerBox("BottomSide", UDim2.new(), UDim2.new(), Vector2.new()),
        CreateCornerBox("BottomDown", UDim2.new(), UDim2.new(), Vector2.new()),
        CreateCornerBox("BottomRightSide", UDim2.new(), UDim2.new(), Vector2.new()),
        CreateCornerBox("BottomRightDown", UDim2.new(), UDim2.new(), Vector2.new())
    }
    local Connection
    Connection = Run_service.RenderStepped:Connect(function()
        if not ven_hook.visuals.esp_enabled or not (model and model.Parent and root and root.Parent) then
            for _, b in pairs(boxes) do b.Visible = false end
            NameTag.Visible = false
            WeaponText.Visible = false
            return
        end
        if IsSleeping(model) then
            for _, b in pairs(boxes) do b.Visible = false end
            NameTag.Visible = false
            WeaponText.Visible = false
            return
        end
        local Pos, OnScreen = Camera:WorldToScreenPoint(root.Position)
        local Size = root.Size.Y
        local distance = math.floor((Camera.CFrame.Position - root.Position).magnitude)
        local scale = 12 / (Pos.Z * math.tan(math.rad(Camera.FieldOfView * 0.5)) * 2) * 100
        local w, h = 3*scale, 4.5*scale
        local WeaponFound = playertable.equippedItem and playertable.equippedItem.type or "None"
        if OnScreen then
            boxes[1].Position = UDim2.new(0, Pos.X - w/2, 0, Pos.Y - h/2)
            boxes[1].Size = UDim2.new(0, w/5, 0, 1)
            boxes[2].Position = UDim2.new(0, Pos.X - w/2, 0, Pos.Y - h/2)
            boxes[2].Size = UDim2.new(0, 1, 0, h/5)
            boxes[3].Position = UDim2.new(0, Pos.X + w/2 - w/5, 0, Pos.Y - h/2)
            boxes[3].Size = UDim2.new(0, w/5, 0, 1)
            boxes[4].Position = UDim2.new(0, Pos.X + w/2 - 1, 0, Pos.Y - h/2)
            boxes[4].Size = UDim2.new(0, 1, 0, h/5)
            boxes[5].Position = UDim2.new(0, Pos.X - w/2, 0, Pos.Y + h/2 - h/5)
            boxes[5].Size = UDim2.new(0, 1, 0, h/5)
            boxes[6].Position = UDim2.new(0, Pos.X - w/2, 0, Pos.Y + h/2)
            boxes[6].Size = UDim2.new(0, w/5, 0, 1)
            boxes[7].Position = UDim2.new(0, Pos.X + w/2 - 1, 0, Pos.Y + h/2 - h/5)
            boxes[7].Size = UDim2.new(0, 1, 0, h/5)
            boxes[8].Position = UDim2.new(0, Pos.X + w/2 - w/5, 0, Pos.Y + h/2)
            boxes[8].Size = UDim2.new(0, w/5, 0, 1)
            for _, b in pairs(boxes) do b.Visible = ven_hook.visuals.show_corner_box end
            NameTag.Text = (root:FindFirstChild("Nametag") and root.Nametag.tag.Text or "Player")
            NameTag.Position = UDim2.new(0, Pos.X, 0, Pos.Y - h/2 - 20)
            NameTag.TextColor3 = ven_hook.visuals.colors.name_color
            NameTag.Visible = ven_hook.visuals.show_name
            if ven_hook.visuals.show_distance then
                NameTag.Text = NameTag.Text .. " ["..distance.."m]"
                NameTag.TextColor3 = ven_hook.visuals.colors.dist_color
            end
            WeaponText.Text = "["..WeaponFound:upper().."]"
            WeaponText.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h/2 + 3)
            WeaponText.TextColor3 = ven_hook.visuals.colors.weapon_color
            WeaponText.Visible = ven_hook.visuals.show_weapon
        else
            for _, b in pairs(boxes) do b.Visible = false end
            NameTag.Visible = false
            WeaponText.Visible = false
        end
    end)
end

for _, v in pairs(PlayerList) do
    if v.type == "Player" and v.model:FindFirstChild("HumanoidRootPart") and not table.find(Cache, v) then
        table.insert(Cache, v)
        ESP(v)
    end
end

workspace.ChildAdded:Connect(function()
    task.delay(0.5, function()
        for _, v in pairs(PlayerList) do
            if v.type == "Player" and v.model:FindFirstChild("HumanoidRootPart") and not table.find(Cache, v) then
                table.insert(Cache, v)
                ESP(v)
            end
        end
    end)
end)
function ven_hook:Create(className, properties)
    local success, object = pcall(Drawing.new, className)
    if not success or not object then 
        return nil 
    end
    for prop, value in next, properties or {} do
        local ok = pcall(function() 
            object[prop] = value 
        end)
        if not ok then 
        end
    end
    return object
end


local ESPObjects = {}
local function createESP(part, oreName)
    if not ven_hook.visuals or not ven_hook.visuals.colors then
        return
    end
    local drawing = ven_hook:Create("Text", {
        Text = oreName,
        Size = 14,
        Center = true,
        Outline = true,
        Color = ven_hook.visuals.colors.ore_name_color,
        Visible = false,
    })
    ESPObjects[part] = {drawing = drawing, oreName = oreName}
end
local function updateESP()
    for part, data in pairs(ESPObjects) do
        local drawing = data.drawing
        if not ven_hook.visuals.ore_esp_enabled or not part or not part.Parent then
            drawing.Visible = false
        else
            local partPos = part.Position
            local vector, onScreen = Camera:WorldToViewportPoint(partPos)
            local distance = (Camera.CFrame.Position - partPos).Magnitude
            if onScreen and distance <= ven_hook.visuals.ore_max_distance then
                local text = ""
                if ven_hook.visuals.show_name then
                    text = "[" .. data.oreName .. "]"
                end
                if ven_hook.visuals.show_distance then
                    text = text .. string.format(" %.0f studs", distance)
                end
                drawing.Text = text
                drawing.Position = Vector2.new(vector.X, vector.Y - 10)
                drawing.Color = ven_hook.visuals.colors.ore_name_color
                drawing.Visible = true
            else
                drawing.Visible = false
            end
        end
    end
end


local function classifyAndAdd(part)
    if part:IsA("MeshPart") then
        local name
        if part.BrickColor == BrickColor.new("Flint") and part.Material == Enum.Material.Limestone then
            name = "Stone"
        elseif part.BrickColor == BrickColor.new("Burlap") and part.Material == Enum.Material.Slate then
            name = "Iron"
        elseif part.BrickColor == BrickColor.new("Institutional white") and part.Material == Enum.Material.Slate then
            name = "Nitrate"
        end
        if name then
            createESP(part, name)
        end
    end
end


for _, part in ipairs(workspace:GetDescendants()) do
    classifyAndAdd(part)
end

workspace.DescendantAdded:Connect(classifyAndAdd)
game:GetService("RunService").RenderStepped:Connect(updateESP)

local function safeMerge(tblA, tblB)
	local merged = {}
	if typeof(tblA) == "table" then
		for _, v in ipairs(tblA) do table.insert(merged, v) end
	end
	if typeof(tblB) == "table" then
		for _, v in ipairs(tblB) do table.insert(merged, v) end
	end
	return merged
end

local function update_model()
    if gun_model and ven_hook.visuals.gun_color_enabled then
        for _, v in ipairs(gun_model:GetDescendants()) do
            if v:IsA("BasePart") or v:IsA("MeshPart") then
                v.Material = Enum.Material.ForceField
                v.Color = ven_hook.visuals.gun_color
                v.Transparency = 0
            end
        end
    end

    if fps_arms and ven_hook.visuals.arms_color_enabled then
        local fakeArms = fps_arms:FindFirstChild("Fake")
        local merged = safeMerge(fps_arms:GetChildren(), fakeArms and fakeArms:GetChildren() or {})
        for _, v in ipairs(merged) do
            if v:IsA("MeshPart") then
                v.Material = Enum.Material.ForceField
                v.Color = ven_hook.visuals.arms_color
                v.Transparency = 0
            end
        end
    end
end

fps_arms.ChildAdded:Connect(function(child)
	task.wait()
	if child.Name == "HandModel" then
		gun_model = child
		update_model()
	end
end)

task.defer(update_model)

local repo = 'https://raw.githubusercontent.com/milo22-ux/Linoria-modded-/main/'
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/milo22-ux/Linoria-modded-/refs/heads/main/LinoriaModded.lua", true))()
local ThemeManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/milo22-ux/Linoria-modded-/refs/heads/main/ThemeManger.txt.lua",true))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
local Window = Library:CreateWindow({
    Title = 'Vercore',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})


local Tabs = {
        Combat = Window:AddTab('Combat'),
        Visuals = Window:AddTab('Visual'),
        Misc = Window:AddTab('Misc'),
        Config = Window:AddTab('Settings'),
}


local Hitbox = Tabs.Combat:AddRightGroupbox('Hitbox')
local silent = Tabs.Combat:AddLeftGroupbox('Silent aim')
local Mods = Tabs.Combat:AddRightGroupbox('Mods')
local esp = Tabs.Visuals:AddLeftGroupbox('Esp')
local cool = Tabs.Visuals:AddLeftGroupbox('arms + guns')
local ore = Tabs.Visuals:AddRightGroupbox('Ore Esp')
local random = Tabs.Visuals:AddRightGroupbox('Random Esps')
local world = Tabs.Visuals:AddRightGroupbox('World')
local stuff = Tabs.Misc:AddLeftGroupbox('Stuff')
local Config = Tabs.Config:AddLeftGroupbox('Menu')


local gun = cool:AddToggle('custom_gun', {
	Text = 'Custom gun',
	Default = ven_hook.visuals.custom_gun,
	Tooltip = 'Toggle custom gun',
	Callback = function(Value)
		ven_hook.visuals.custom_gun = Value
		update_model()
	end
})
Toggles.custom_gun:SetValue(ven_hook.visuals.custom_gun)

gun:AddColorPicker('gun_color', {
	Default = ven_hook.visuals.gun_color,
	Title = 'Gun Color',
	Transparency = 0,
	Callback = function(Value)
		ven_hook.visuals.gun_color = Value
		if ven_hook.visuals.custom_gun then
			update_model()
		end
	end
})

local arms = cool:AddToggle('custom_amrs', {
	Text = 'Custom arms',
	Default = ven_hook.visuals.custom_arms,
	Tooltip = 'Toggle custom arms',
	Callback = function(Value)
		ven_hook.visuals.custom_arms = Value
		update_model()
	end
})
Toggles.custom_amrs:SetValue(ven_hook.visuals.custom_arms)

arms:AddColorPicker('ArmsColorPicker', {
	Default = ven_hook.visuals.arms_color,
	Title = 'Arms Color',
	Transparency = 0,
	Callback = function(Value)
		ven_hook.visuals.arms_color = Value
		if ven_hook.visuals.custom_arms then
			update_model()
		end
	end
})

stuff:AddToggle('field_of_view', {
    Text = 'Field of View',
    Default = false,
    Tooltip = '',
    Callback = function(Value)
        ven_hook.misc.change_field_of_view = Value
         end
})
stuff:AddSlider('field_of view', {
    Text = 'Field of view',
    Default = 70,
    Min = 70,
    Max = 120,
    Rounding = 1,
    Compact = false,
    Callback = function(Value)
        ven_hook.misc.fov_val = Value
         end
})
stuff:AddToggle('silent_walk', {
    Text = 'Silent Walk',
    Default = false,
    Tooltip = '',
    Callback = function(Value)
        ven_hook.misc.silent_walk = Value
         end
})
stuff:AddToggle('chat_spam', {
    Text = 'Chat Spam',
    Default = false,
    Tooltip = '',
    Callback = function(Value)
        ven_hook.misc.chat_spam = Value
         end
})
local ambient = world:AddToggle('ambient', {
    Text = 'Ambient',
    Default = false,
    Tooltip = '',
    Callback = function(Value)
        ven_hook.visuals.custom_ambience = Value
         end
})
world:AddToggle('no_fog', {
    Text = 'No fog',
    Default = false,
    Tooltip = '',
    Callback = function(Value)
        ven_hook.visuals.no_fog = Value
         end
})
world:AddToggle('no_shadow', {
    Text = 'No shadow',
    Default = false,
    Tooltip = '',
    Callback = function(Value)
        ven_hook.visuals.no_shadow = Value
         end
})
world:AddToggle('no_colorshift', {
    Text = 'No colorshift',
    Default = false,
    Tooltip = '',
    Callback = function(Value)
        ven_hook.visuals.no_colorshift = Value
         end
})
ambient:AddColorPicker('ColorPicker', { Default = Color3.new(1, 1, 1), Title = '', Transparency = 0, Callback = function(Value) ven_hook.visuals.ambience_color = Value end })
esp:AddToggle('esp_enabled', {
    Text = 'Enable esp',
    Default = false,
    Tooltip = '',
    Callback = function(Value)
        ven_hook.visuals.esp_enabled = Value
         end
})
local box = esp:AddToggle('show_box', {
    Text = 'Show box',
    Default = false,
    Tooltip = '',
    Callback = function(Value)
        ven_hook.visuals.show_corner_box = Value
         end
})
local name = esp:AddToggle('show_name', {
    Text = 'Show name',
    Default = false,
    Tooltip = '',
    Callback = function(Value)
        ven_hook.visuals.show_name = Value
         end
})
local dist = esp:AddToggle('show_dist', {
    Text = 'Show distance',
    Default = false,
    Tooltip = '',
    Callback = function(Value)
        ven_hook.visuals.show_distance = Value
         end
})
local weap = esp:AddToggle('show_weap', {
    Text = 'Show weapon',
    Default = false,
    Tooltip = '',
    Callback = function(Value)
        ven_hook.visuals.show_weapon = Value
         end
})
esp:AddToggle('sleep_check', {
    Text = 'Sleeper check',
    Default = false,
    Tooltip = '',
    Callback = function(Value)
        ven_hook.visuals.sleep_check = Value
         end
})
esp:AddSlider('max_dist', {
    Text = 'Max distance',
    Default = 1000,
    Min = 1,
    Max = 1500,
    Rounding = 1,
    Compact = false,
    Callback = function(Value)
        ven_hook.visuals.max_distance = Value
         end
})
box:AddColorPicker('ColorPicker', { Default = Color3.new(1, 1, 1), Title = '', Transparency = 0, Callback = function(Value) ven_hook.visuals.box_color = Value end })
name:AddColorPicker('ColorPicker', { Default = Color3.new(1, 1, 1), Title = '', Transparency = 0, Callback = function(Value) ven_hook.visuals.name_color = Value end })
dist:AddColorPicker('ColorPicker', { Default = Color3.new(1, 1, 1), Title = '', Transparency = 0, Callback = function(Value) ven_hook.visuals.distance_color = Value end })
weap:AddColorPicker('ColorPicker', { Default = Color3.new(1, 1, 1), Title = '', Transparency = 0, Callback = function(Value) ven_hook.visuals.weapon_color = Value end })
Mods:AddToggle('no_recoil', {
    Text = 'No recoil',
    Default = false,
    Tooltip = '',
    Callback = function(Value)
        ven_hook.combat.no_recoil = Value
         end
})
Mods:AddToggle('no_spread', {
    Text = 'No spread',
    Default = false,
    Tooltip = '',
    Callback = function(Value)
        ven_hook.combat.no_spread = Value
         end
})
Mods:AddToggle('jump_shoot', {
    Text = 'Jumpshoot',
    Default = false,
    Tooltip = '',
    Callback = function(Value)
        ven_hook.combat.jumpshoot = Value
         end
})
Mods:AddToggle('No_sway', {
    Text = 'No sway',
    Default = false,
    Tooltip = '',
    Callback = function(Value)
        ven_hook.combat.no_sway = Value
         end
})
Mods:AddToggle('drill', {
    Text = 'No drill cooldown',
    Default = false,
    Tooltip = '',
    Callback = function(Value)
        ven_hook.combat.drill_no_cooldown = Value
      for _, v in getgc(true) do
        if type(v) == "table" and rawget(v, "type") == "MiningDrill" then
            v.AttackCooldown = 0
        end
      end
    end
})
silent:AddToggle('silent_aim', {
    Text = 'Silent aim',
    Default = false,
    Tooltip = '',
    Callback = function(Value)
        ven_hook.combat.silent_aim = Value
    end
})

local fov = silent:AddToggle('draw_fov', {
    Text = 'Draw fov',
    Default = false,
    Tooltip = '',
    Callback = function(Value)
        ven_hook.combat.draw_fov = Value
    end
})

silent:AddSlider('fov_radius', {
    Text = 'Fov radius',
    Default = 100,
    Min = 1,
    Max = 1000,
    Rounding = 1,
    Compact = false,
    Callback = function(Value)
        ven_hook.combat.fov_radius = Value
    end
})

fov:AddColorPicker('ColorPicker', {
    Default = Color3.fromRGB(255, 255, 255),
    Title = '',
    Transparency = 0,
    Callback = function(Value)
        ven_hook.combat.fov_color = Value
    end
})

local snapline = silent:AddToggle('draw_snapline', {
    Text = 'Draw snapline',
    Default = false,
    Tooltip = '',
    Callback = function(Value)
        ven_hook.combat.draw_snapline = Value
    end
})

snapline:AddColorPicker('ColorPicker', {
    Default = Color3.fromRGB(255, 255, 255),
    Title = '',
    Transparency = 0,
    Callback = function(Value)
        ven_hook.combat.snapline_color = Value
    end
})
Hitbox:AddToggle('HitboxToggle', {
    Text = 'Enable Hitbox',
    Default = false,
    Tooltip = 'Toggles the head hitbox on/off',
    Callback = function(Value)
        setHitboxEnabled(Value)
    end
})
Hitbox:AddToggle('expand_hbe', {
    Text = 'Hitbox expander',
    Default = false,
    Tooltip = '',
    Callback = function(Value)
        ven_hook.combat.hitbox_expander = Value
        character_cache:upd_hbe()
         end
})
Hitbox:AddSlider('size_x', {
    Text = 'X',
    Default = 5,
    Min = 1,
    Max = 20,
    Rounding = 1,
    Compact = false,
    Callback = function(Value)
        ven_hook.combat.hitbox_size_x = Value
        character_cache:upd_hbe()
         end
})
Hitbox:AddSlider('size_y', {
    Text = 'Y',
    Default = 5,
    Min = 1,
    Max = 20,
    Rounding = 1,
    Compact = false,
    Callback = function(Value)
        ven_hook.combat.hitbox_size_y = Value
        character_cache:upd_hbe()
         end
})
Hitbox:AddSlider('size_z', {
    Text = 'Z',
    Default = 5,
    Min = 1,
    Max = 20,
    Rounding = 1,
    Compact = false,
    Callback = function(Value)
        ven_hook.combat.hitbox_size_z = Value
        character_cache:upd_hbe()
         end
})
Hitbox:AddSlider('transparency', {
    Text = 'Transparency',
    Default = 0.5,
    Min = 0,
    Max = 1,
    Rounding = 1,
    Compact = false,
    Callback = function(Value)
        ven_hook.combat.transparency = Value
        character_cache:upd_hbe()
         end
})
Hitbox:AddToggle('force_head', {
    Text = 'Force head',
    Default = false,
    Tooltip = '',
    Callback = function(Value)
        ven_hook.combat.force_head = Value
         end
})
ore:AddToggle('OreESPEnabled', {
    Text = 'Enable Ore ESP',
    Default = ven_hook.visuals.ore_esp_enabled,
    Callback = function(Value)
        ven_hook.visuals.ore_esp_enabled = Value
    end
})


ore:AddToggle('ShowName', {
    Text = 'Show Ore Name',
    Default = ven_hook.visuals.show_name,
    Callback = function(Value)
        ven_hook.visuals.show_name = Value
    end
})


ore:AddToggle('ShowDistance', {
    Text = 'Show Distance',
    Default = ven_hook.visuals.show_distance,
    Callback = function(Value)
        ven_hook.visuals.show_distance = Value
    end
})


ore:AddSlider('OreMaxDistance', {
    Text = 'Max Distance',
    Default = ven_hook.visuals.ore_max_distance,
    Min = 50,
    Max = 1500,
    Rounding = 0,
    Callback = function(Value)
        ven_hook.visuals.ore_max_distance = Value
    end
})


ore:AddLabel('Ore Name Color'):AddColorPicker('OreNameColor', {
    Default = ven_hook.visuals.colors.ore_name_color,
    Title = 'Ore Name Color',
    Callback = function(Value)
        ven_hook.visuals.colors.ore_name_color = Value
        for _, data in pairs(ESPObjects) do
            data.drawing.Color = Value
        end
    end
})
loadstring(game:HttpGet("https://raw.githubusercontent.com/milo22-ux/V5-paid/refs/heads/main/Name", true))()
local RunService = game:GetService("RunService")
local watermarkEnabled = true

local watermarkText = Drawing.new("Text")
watermarkText.ZIndex = 2
watermarkText.Transparency = 1
watermarkText.Outline = true
watermarkText.OutlineColor = Color3.new()
watermarkText.Font = Drawing.Fonts.UI
watermarkText.Size = 18

local watermarkBox = Drawing.new("Square")
watermarkBox.ZIndex = 1
watermarkBox.Filled = true
watermarkBox.Color = Color3.new(0, 0, 0)
watermarkBox.Transparency = 0.5

local fpstimer, fps, finalfps = tick(), 0, 60
RunService.RenderStepped:Connect(function()
    fps = fps + 1
    if fpstimer + 1 <= tick() then
        fpstimer = tick()
        finalfps = fps
        fps = 0
    end

    local hue = (tick() % 5) / 5
    watermarkText.Color = Color3.fromHSV(hue, 1, 1)

    watermarkText.Text = ("Vercore.xyz | %s | %s fps"):format(
        os.date("%b %d %Y"),
        tostring(finalfps)
    )

    local pos = Vector2.new(10, 10)
    watermarkText.Position = pos

    watermarkBox.Position = pos - Vector2.new(5, 5)
    watermarkBox.Size = Vector2.new(watermarkText.TextBounds.X + 10, watermarkText.TextBounds.Y + 10)

    watermarkText.Visible = watermarkEnabled
    watermarkBox.Visible = watermarkEnabled
end)
    
    Config:AddToggle('show_keybind_ui', {
    Text = 'Show Keybind UI',
    Default = false,
    Callback = function(Value)
        Library.KeybindFrame.Visible = Value
    end
})

Library.KeybindFrame.Visible = true
    
Library:OnUnload(function()
    WatermarkConnection:Disconnect()
    Library.Unloaded = true
end)
    
Library.ToggleKeybind = Options.MenuKeybind
Config:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'RightShift', NoUI = true, Text = 'Menu keybind' })
Config:AddButton('Unhook', function() Library:Unload() end)
    
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
ThemeManager:SetFolder('Vercore')
SaveManager:SetFolder('Vercore/Trident')
SaveManager:BuildConfigSection(Tabs.Config)
ThemeManager:ApplyToTab(Tabs.Config)
SaveManager:LoadAutoloadConfig()
